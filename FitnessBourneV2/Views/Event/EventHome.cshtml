@model FitnessBourneV2.Models.EventHomeModel

@{
    ViewBag.Title = "EventHome";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.css" />
<link rel="stylesheet" href="~/Content/leaflet-routing-machine.css" />
<link rel="stylesheet" href="~/Content/index_route.css" />
<link rel="stylesheet" type="text/css" href="~/Content/EventDetails.css">
<div class="row" id="DetailsPane">
    <div class="col-md-10 col-md-offset-1" id="DetailsCol">
        <div class="row">
            <div class="col-md-2 col-md-offset-5">
                <h1 style="color:white;">@Model.EventypeInView</h1>
            </div>
        </div>
        <div id="myCarousel" class="row carousel slide" data-interval="false">

            <!-- Left Indicator -->
            <a class="left carousel-control" href="#myCarousel" data-slide="prev">
                <span class="glyphicon glyphicon-chevron-left"></span>
                <span class="sr-only">Previous</span>
            </a>

            <!-- Indicators -->
            <div class="row">
                <!-- Wrapper for slides -->
                <div class="carousel-inner col-md-8 col-md-offset-2">
                    @for (int j = 0; j < Model.eventList.Count; j++)
                    {
                        var className = "item";
                        if (j == 0)
                        {
                            className = className + " active";
                        }
                        <div class="@className">
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="labelTxt">Event Start Datetime :</label>
                                </div>
                                <div class="col-md-3">
                                    <label class="labelTxt">Event End Datetime  :</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m.eventList[j].eventStartTime, new { @class = "eventStartDT txtBox", @readonly = "readonly" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m.eventList[j].eventEndTime, new { @class = "eventEndDT txtBox", @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="labelTxt">Event Start Location :</label>
                                </div>
                                <div class="col-md-3">
                                    <label class="labelTxt">Event End Location  :</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m.eventList[j].startLoc, new { @class = "eventStartDT txtBox", @readonly = "readonly" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m.eventList[j].stopLoc, new { @class = "eventEndDT txtBox", @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="labelTxt">Event Check Point Locations :</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-10">
                                    @Html.TextAreaFor(m => m.eventList[j].checkPoints, new { @class = "checkPointLoc", @readonly = "readonly", @id = "checkTxt" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="labelTxt">Total Distance :</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    @Html.TextBoxFor(m => m.eventList[j].totalDistance, new { @class = "totalDistance", @readonly = "readonly" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-6">
                                    <label class="labelTxt">Navigation Directions :</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-10">
                                    @Html.TextAreaFor(m => m.eventList[j].navInstructions, new { @class = "navInstruction", @readonly = "readonly", @id = "navInstrTxt" })
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="labelTxt">Seat Availability :</label>
                                </div>
                                <div class="col-md-3">
                                    <label class="labelTxt">Total Capacity  :</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m.eventList[j].seatAvailblity, new { @class = "seatavailability txtBox", @readonly = "readonly" })
                                </div>
                                <div class="col-md-3">
                                    @Html.TextBoxFor(m => m.eventList[j].totalCapacity, new { @class = "totalcapacity txtBox", @readonly = "readonly" })
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="row" id="PageSlider">
                <!--Slider pages-->
                <ol class="carousel-indicators">
                    <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                    @for (int i = 1; i < Model.eventList.Count; i++)
                    {
                        var pos = '"' + i.ToString() + '"';
                        <li data-target="#myCarousel" data-slide-to=@pos></li>
                    }
                </ol>
            </div>

            <!-- Right controls -->
            <a class="right carousel-control" href="#myCarousel" data-slide="next">
                <span class="glyphicon glyphicon-chevron-right"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>
</div>
<div class="row" id="MapPane">
    <div class="col-md-10 col-md-offset-1" id="MapOuterContainer">
        <div id="mapRoute" class="mapRouteClass disabledbutton"></div>
    </div>
</div>
<script src="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.js"></script>
<script src="~/Scripts/leaflet-routing-machine.js"></script>
<script src="~/Scripts/Control.Geocoder.js"></script>
<script src="~/Scripts/config.js"></script>
<script src="~/Scripts/index_route.js"></script>
<script>
    var counter = 0
    $('#myCarousel').bind('slide.bs.carousel', function (e) {

        var endCount = @Model.eventList.Count;

        if (e.direction == "left") {

            //Manipulate change
            if (counter == endCount-1) {

                counter = 0;
            }

            counter = counter + 1;
        }
        if (e.direction == "right") {

            //Manipulate change
            if (counter == 0) {

                counter = endCount - 1;
            }

            counter = counter - 1;
        }

        //get data for map
        $.ajax({
        type: "POST",
        url: '@Url.Action("getLocation", "Event")',
        contentType: "application/json; charset=utf-8",
        data: { "anchorname": counter },
        dataType: 'json',
        async: false,
        success: function (data) {

            //get result of map string
            var result = JSON.stringify(data);

            //Add enough input labels to the map
            var inputClicks = result.length - 2;
            for (var j = 0; j < inputClicks; ++j)
            {
                $('.leaflet-routing-add-waypoint').trigger('click');
            }

            //Add text to label
            var itr = 0;
            $('.leaflet-control-container input').each(function () {

                this.value = result[itr];
                itr = itr + 1;
            });
        },
        error: function () {

            alert("Error in contacting server!");

        }
        });
        alert(e.direction);
    });
</script>