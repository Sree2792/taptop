@model FitnessBourneV2.Models.EventHomeModel

@{
    ViewBag.Title = "MapEventJoin";
}

<link rel="stylesheet" type="text/css" href="~/Content/EventDetails.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.css" />
<link rel="stylesheet" href="~/Content/leaflet-routing-machine.css" />
<link rel="stylesheet" href="~/Content/index_route.css" />

<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <div class="row">
            <div class="col-md-2 col-md-offset-4">
                <h1 style="color:white;">@Model.EventypeInView</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label class="labelTxt">Event Start Datetime :</label>
            </div>
            <div class="col-md-6">
                <label class="labelTxt">Event End Datetime  :</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.eventList[0].eventStartTime, new { @class = "eventStartDT txtBox", @readonly = "readonly" })
            </div>
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.eventList[0].eventEndTime, new { @class = "eventEndDT txtBox", @readonly = "readonly" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label class="labelTxt">Event Start Location :</label>
            </div>
            <div class="col-md-6">
                <label class="labelTxt">Event End Location  :</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.eventList[0].startLoc, new { @class = "eventStartDT txtBox", @readonly = "readonly" })
            </div>
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.eventList[0].stopLoc, new { @class = "eventEndDT txtBox", @readonly = "readonly" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label class="labelTxt">Event Check Point Locations :</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.eventList[0].checkPoints, new { @class = "checkPointLoc txtBox", @readonly = "readonly", @id = "checkTxt" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label class="labelTxt">Total Distance :</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                @Html.TextBoxFor(m => m.eventList[0].totalDistance, new { @class = "totalDistance txtBox", @readonly = "readonly" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <label class="labelTxt">Navigation Directions :</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-10">
                @Html.TextAreaFor(m => m.eventList[0].navInstructions, new { @class = "navInstruction txtBox", @readonly = "readonly", @id = "navInstrTxt" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label class="labelTxt">Seat Availability :</label>
            </div>
            <div class="col-md-6">
                <label class="labelTxt">Total Capacity  :</label>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.eventList[0].seatAvailblity, new { @class = "seatavailability txtBox", @readonly = "readonly" })
            </div>
            <div class="col-md-6">
                @Html.TextBoxFor(m => m.eventList[0].totalCapacity, new { @class = "totalcapacity txtBox", @readonly = "readonly" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-3 col-md-offset-4">
                <button id="joinBtnMap" type="button" onclick="joinEvent(@Model.eventList[0].eventID)">   JOIN   </button>
            </div>
        </div>
    </div>
</div>
<div class="col-md-10 col-md-offset-1">
    <div id="mapRoute" class="mapRouteClass" style="margin-top:5%;"></div>
</div>

<script src="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.js"></script>
<script src="~/Scripts/leaflet-routing-machine.js"></script>
<script src="~/Scripts/Control.Geocoder.js"></script>
<script src="~/Scripts/config.js"></script>

<script>

    var mapMain = L.map('mapRoute').setView([-37.89, 145.00], 11);
    var control;

    function joinEvent(eventNum) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("joinEvent", "Event")',
            data: { "anchorname": eventNum},
            success: function (response) {

                var url = '@Url.Action("Index", "Home")';
                window.location.href = url;
            },
            error: function () {

                alert("Error in contacting server!");

            }
        });
    }

     $(document).ready(function () {

         var counter = @Model.eventList[0].eventID;

         //get data for map
        $.ajax({
        type: "POST",
        url: '@Url.Action("GetLocationOnEdit", "Event")',
        data: { "counterVal": counter},
        dataType: 'json',
        async: true,
        success: function (data) {

            var mapIcon = L.icon({
                iconUrl: '../Image/Map_Pin.png',
                iconSize: [38, 95], // size of the icon
                popupAnchor: [0, -15]
            });

            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(mapMain);

            control = L.Routing.control(L.extend(window.lrmConfig, {
                waypoints: data,
                geocoder: L.Control.Geocoder.nominatim(),
                draggableWaypoints: false,
                addWaypoints: false,
                altLineOptions: {
                    styles: [
                        { color: 'black', opacity: 0.15, weight: 9 },
                        { color: 'white', opacity: 0.8, weight: 6 },
                        { color: 'blue', opacity: 0.5, weight: 2 }
                    ]
                }
            })).addTo(mapMain);

            L.Routing.errorControl(control).addTo(mapMain);
        },
        failure: function (data) {
            alert(data.d);
        },
        error: function (data) {
            alert(data.d);
        }
        });
    });
</script>


