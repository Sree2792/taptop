@model FitnessBourneV2.Models.EventJoinedModel

@{
    ViewBag.Title = "EventJoin";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.css" />
<link rel="stylesheet" href="~/Content/leaflet-routing-machine.css" />
<link rel="stylesheet" href="~/Content/index_route.css" />
<link rel="stylesheet" type="text/css" href="~/Content/EventDetails.css">
@using (Html.BeginForm("EventJoin", "EventJoined", FormMethod.Post, new { @class = "form-horizontal", @id = "mainForm", role = "form" }))
{
    <div class="row" id="DetailsPane">
        <div class="col-md-10" id="DetailsCol">
            <div id="myCarousel" class="row carousel slide" data-interval="false">

                <!-- Left Indicator -->
                <a class="left carousel-control" href="#myCarousel" style="width:1%;" data-slide="prev">
                    <span class="glyphicon glyphicon-chevron-left"></span>
                    <span class="sr-only">Previous</span>
                </a>

                <!-- Indicators -->
                <div class="row">
                    <!-- Wrapper for slides -->
                    <div class="carousel-inner col-md-8 col-md-offset-2">
                        @for (int j = 0; j < Model.listOfEventJoined.Count; j++)
                        {
                            var className = "item";
                            if (j == 0)
                            {
                                className = className + " active";
                            }
                            <div class="@className">
                                <div class="row">
                                    <div class="col-md-2 col-md-offset-3">
                                        <h1 style="color:white;">@Model.listOfEventJoined[j].EventypeInView</h1>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="labelTxt">Event Start Datetime :</label>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="labelTxt">Event End Datetime  :</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].eventStartTime, new { @class = "eventStartDT txtBox", @readonly = "readonly" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].eventEndTime, new { @class = "eventEndDT txtBox", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="labelTxt">Event Start Location :</label>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="labelTxt">Event End Location  :</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].startLoc, new { @class = "eventStartDT txtBox", @readonly = "readonly" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].stopLoc, new { @class = "eventEndDT txtBox", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="labelTxt">Event Check Point Locations :</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(m => m.listOfEventJoined[j].checkPoints, new { @class = "checkPointLoc txtBox", @readonly = "readonly", @id = "checkTxt" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="labelTxt">Total Distance :</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].totalDistance, new { @class = "totalDistance txtBox", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <label class="labelTxt">Navigation Directions :</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-10">
                                        @Html.TextAreaFor(m => m.listOfEventJoined[j].navInstructions, new { @class = "navInstruction txtBox", @readonly = "readonly", @id = "navInstrTxt" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <label class="labelTxt">Seat Availability :</label>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="labelTxt">Total Capacity  :</label>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].seatAvailblity, new { @class = "seatavailability txtBox", @readonly = "readonly" })
                                    </div>
                                    <div class="col-md-3">
                                        @Html.TextBoxFor(m => m.listOfEventJoined[j].totalCapacity, new { @class = "totalcapacity txtBox", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-3">
                                        <button class="deleteEditBtn" type="button" onclick="deleteEvent(@Model.listOfEventJoined[j].eventID)">   Withdraw   </button>
                                    </div>
                                    <div class="col-md-3">
                                        <button class="deleteEditBtn" type="button" onclick="location.href='@Url.Action("EventEdit","Event",  new {eventID = @Model.listOfEventJoined[j].eventID})'">   Edit   </button>
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </div>
                <div class="row" id="PageSlider">
                    <!--Slider pages-->
                    <ol class="carousel-indicators">
                        <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                        @for (int i = 1; i < Model.listOfEventJoined.Count; i++)
                        {
                            var pos = '"' + i.ToString() + '"';
                            <li data-target="#myCarousel" data-slide-to=@pos></li>
                        }
                    </ol>
                </div>

                <!-- Right controls -->
                <a class="right carousel-control" style="width:1%;" href="#myCarousel" data-slide="next">
                    <span class="glyphicon glyphicon-chevron-right"></span>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
    </div>
}
<div class="row" id="MapPane">
    <div class="col-md-10 col-md-offset-1" id="MapOuterContainer">
        <div id="mapRoute" class="mapRouteClass"></div>
    </div>
</div>


<script src="https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.js"></script>
<script src="~/Scripts/leaflet-routing-machine.js"></script>
<script src="~/Scripts/Control.Geocoder.js"></script>
<script src="~/Scripts/config.js"></script>

<script>
    var mapMain = L.map('mapRoute').setView([-37.89, 145.00], 11);
    var control;

    // delete event
    function deleteEvent(eventNum) {

        $.ajax({
            type: "POST",
            url: '@Url.Action("deleteEvent", "EventJoined")',
            data: { "anchorname": eventNum},
            success: function (response) {

                document.getElementById("mainForm").submit();
            },
            error: function () {

                alert("Error in contacting server!");

            }
        });
    }

    var counter = 0
    $('#myCarousel').bind('slide.bs.carousel', function (e) {

        var endCount = @Model.listOfEventJoined.Count;

        if (e.direction == "left") {

            //Manipulate change
            if (counter == endCount - 1) {

                counter = 0;
            } else {

                counter = counter + 1;
            }

            
        }
        if (e.direction == "right") {

            //Manipulate change
            if (counter == 0) {

                counter = endCount - 1;
            } else {
                counter = counter - 1;
            }

            
        }

        //get data for map
        $.ajax({
        type: "POST",
        url: '@Url.Action("GetLocation", "EventJoined")',
        data: { "counterVal": counter},
        dataType: 'json',
        async: true,
        success: function (data) {

            mapMain.removeControl(control);

            control = L.Routing.control(L.extend(window.lrmConfig, {
                waypoints: data,
                geocoder: L.Control.Geocoder.nominatim(),
                draggableWaypoints: false,
                addWaypoints: false,
                altLineOptions: {
                    styles: [
                        { color: 'black', opacity: 0.15, weight: 9 },
                        { color: 'white', opacity: 0.8, weight: 6 },
                        { color: 'blue', opacity: 0.5, weight: 2 }
                    ]
                }
            })).addTo(mapMain);

            L.Routing.errorControl(control).addTo(mapMain);
        },
        failure: function (data) {
            alert(data.d);
        },
        error: function (data) {
            alert(data.d);
        }
        });
    });

    //Document ready
    $(document).ready(function () {

        var counter = @Model.listOfEventJoined[0].eventID;

        //get data for map
        $.ajax({
        type: "POST",
        url: '@Url.Action("GetLocationOnEdit", "Event")',
        data: { "counterVal": counter},
        dataType: 'json',
        async: true,
        success: function (data) {
            
            var mapIcon = L.icon({
                iconUrl: '../Image/Map_Pin.png',
                iconSize: [38, 95], // size of the icon
                popupAnchor: [0, -15]
            });

            L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(mapMain);

            control = L.Routing.control(L.extend(window.lrmConfig, {
                waypoints: data,
                geocoder: L.Control.Geocoder.nominatim(),
                draggableWaypoints: false,
                addWaypoints: false,
                altLineOptions: {
                    styles: [
                        { color: 'black', opacity: 0.15, weight: 9 },
                        { color: 'white', opacity: 0.8, weight: 6 },
                        { color: 'blue', opacity: 0.5, weight: 2 }
                    ]
                }
            })).addTo(mapMain);

            L.Routing.errorControl(control).addTo(mapMain);
        },
        failure: function (data) {
            alert(data.d);
        },
        error: function (data) {
            alert(data.d);
        }
        });
    });
</script>


